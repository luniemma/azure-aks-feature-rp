name: Deploy AKS with Terraform

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CONFIG_DIR: /tmp/.azure

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Azure CLI Login
      run: |
        echo "Attempting to log in to Azure..."
        az login --service-principal \
          -u $ARM_CLIENT_ID \
          -p $ARM_CLIENT_SECRET \
          --tenant $ARM_TENANT_ID \
          --allow-no-subscriptions
        
        echo "Setting subscription..."
        az account set --subscription $ARM_SUBSCRIPTION_ID
        
        echo "Verifying login..."
        az account show

    - name: Grant AKS Permissions
      run: |
        echo "Granting AKS permissions..."
        az role assignment create --assignee $ARM_CLIENT_ID \
          --role "Azure Kubernetes Service Contributor" \
          --scope "/subscriptions/$ARM_SUBSCRIPTION_ID"

    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform init \
          -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="sas_token=${{ secrets.AZURE_STORAGE_SAS_TOKEN }}"

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        echo "Applying Terraform changes..."
        terraform apply -auto-approve tfplan

    - name: Terraform Output
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        echo "Terraform outputs:"
        terraform output

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up..."
        rm -f tfplan
        az logout